html
  body
    include blocks/navbar
    h2.section-title
      span FAQs
    .row
        .span8.offset2.section-content
            h4 Who made this?
            p
              | You and I did, with some help from Adobe. &nbsp;
              a(href='http://arstechnica.com/security/2013/11/how-an-epic-blunder-by-adobe-could-strengthen-hand-of-password-crackers/')
                | They accidentally leaked &nbsp;
              | 153 million encrypted user passwords and hints, which is where the "crossword puzzle" comes from.
            p
              | I got the idea from this XKCD 
              | comic:
            p.image-box
              a(href='http://xkcd.com/1286/')
                img(src="http://imgs.xkcd.com/comics/encryptic.png",width=473,height=541)
            h4 How does it work?
            p
              | When Adobe stored their users' passwords, they encrypted them (which is good).  Unfortunately, they didn't&nbsp;
              em hash &nbsp;
              | them, and they kept the password hints in clear text.
            p
              | Basically, their encryption algorithm split passwords into sequences of 8 characters, each of which
              | corresponds to the same block,
              | repeated across all passwords.  This creates an interesting byproduct.
            p
              | Look at the cartoon above.  If we know that "weather vane sword" and "favorite of 12 apostles" are hints for
              | the same block, then the only 8-letter solution that fits both is&nbsp;
              span.monospace-font matthias
              | . (The first hint is a reference to the&nbsp;
              a(href='https://en.wikipedia.org/wiki/Redwall') Redwall&nbsp;
              | books.)
            p
              | Now, if we assume "name1" is a hint for&nbsp;
              span.monospace-font matthias1
              | , then we've not only solved&nbsp;
              span.monospace-font matthias
              | , but also&nbsp;
              span.monospace-font 1
              | .  Combine this with "duh", which is probably
              | a hint for&nbsp;
              span.monospace-font password
              | &nbsp;(all too common),
              | and we've successfully cracked the 5th password as&nbsp;
              span.monospace-font password1
              | , even though there's no hint!
            p
              | Neat, huh?&nbsp;
              a(href='http://www.explainxkcd.com/wiki/index.php?title=1286') A lot of XKCD readers think so, too.
            h4 Aren't you compromising people's personal information?
            p
              | Unless someone manages to guess Adobe's cipher key (brute force seems to be the only way), the majority of the passwords are probably safe.
              | Plus, Adobe already sent out &nbsp;
              a(href='http://helpx.adobe.com/x-productkb/policy-pricing/customer-alert.html?PID=3662453') a security advisory &nbsp;
              | telling their users to change their passwords.
            p And even though the leaked file is readily available on the Internet, I took the precuation of only exposing what's
              | necessary for the crossword puzzle.
            h4 Why did you create this site?
            p
              | I made it as a proof-of-concept for Randall's cartoon, to show that the Adobe leak really does
              | make for an excellent crossword puzzle.  I think it's fun!
            p 
              | And hopefully, my little experiment will also manage to make a statement about the importance of good security.  Protip: if
              | I can make a crossword puzzle out of your database, then your security sucks.
            h4 So what can users do to improve their password security?
            p
              | First off, passwords like &nbsp;
              a(href='#/block/23463') matthew
              | , &nbsp;
              a(href='#/block/131435') adobe69
              | , and even &nbsp;
              a(href='#/block/100313') keroppi&nbsp;
              | just aren't cutting it, folks.  Human memory has its limits, though, so
              | we need a good compromise between &nbsp;
              span.monospace-font pikachu
              | &nbsp; and 
              span.monospace-font P1k4chuu~2012!
              | .
            p
              | I wrote&nbsp;
              a(href='http://nolanlawson.com/2012/12/01/personal-password-security-that-actually-works/') this blog post&nbsp;
              | about the system I use for my own passwords, which costs nothing and requires no special technical knowledge.  (TL;DR:&nbsp;
              a(href='http://www.joelonsoftware.com/items/2008/09/11b.html') use Dropbox and Password Gorilla&nbsp;
              | .)  Your passwords end up looking like &nbsp;
              span.monospace-font Mt^cdxE973N$C\@=
              | , they're always different, and you don't have to memorize them.
            p
              | Anyone using this system would greatly minimize their 
              | exposure to a leak like Adobe's, because their passwords wouldn't 
              | be re-used across multiple sites.
            h4 What can developers do to improve security?
            p
              | Salt and hash your user passwords.  Make the salt different every time.
              | Use a cryptographically-strong random number generator.
            p
              | And most importantly, ignore everything I just wrote, because&nbsp;
              em you should never try to do security yourself.&nbsp;
              | Instead, use a well-established library for your language or framework.  Security is easy to screw up, so leave the hard stuff to the experts.
            p
              | For instance, this site uses&nbsp;
              a(href='https://wiki.apache.org/couchdb/Security_Features_Overview') CouchDB's built-in security feature&nbsp;
              | for user authentication, which does PBKDF2 and cookie expiration and other fancy stuff that I don't even
              | need to understand, so I can't possibly screw it up.

            
